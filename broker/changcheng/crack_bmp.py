# coding:utf-8
from PIL import Image, ImageEnhance
num_matrix = [
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,0,1,1,
1,1,1,1,1,1,1,0,0,0,1,1,
1,1,1,1,0,0,0,0,0,0,1,1,
1,1,1,1,0,0,0,0,0,0,1,1,
1,1,1,1,1,1,1,0,0,0,1,1,
1,1,1,1,1,1,0,0,1,1,1,1,
1,1,1,1,1,1,0,0,0,1,1,1,
1,1,1,1,1,1,0,0,0,1,1,1,
1,1,1,1,1,1,0,1,0,1,1,1,
1,1,1,1,1,1,0,1,0,1,1,1,
1,1,1,1,1,1,0,0,1,1,1,1,
1,1,1,1,1,0,0,0,1,1,1,1,
1,1,0,0,0,0,0,0,0,0,1,1,
1,1,0,0,0,0,1,0,0,0,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,0,1,1,
1,1,1,0,0,0,0,0,0,1,1,1,
1,1,0,1,0,0,0,0,0,0,0,1,
1,1,1,0,1,1,1,1,0,1,0,1,
1,1,1,1,1,1,1,1,1,1,0,1,
1,1,1,1,1,1,1,1,0,0,1,1,
1,1,1,1,1,1,1,1,0,0,1,1,
1,1,1,1,1,1,1,0,0,0,1,1,
0,1,1,1,1,0,0,0,1,1,1,1,
0,1,1,0,0,0,0,1,1,1,1,1,
1,1,1,0,0,1,1,1,1,1,1,1,
1,1,0,0,0,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,0,0,1,1,
1,0,0,0,0,0,1,0,0,0,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,0,0,0,0,0,1,1,
1,1,1,1,0,0,0,0,0,0,0,1,
1,1,1,1,0,1,1,1,1,0,0,0,
1,1,1,1,1,1,1,1,1,0,0,0,
1,1,1,1,1,1,1,1,0,0,0,1,
1,1,1,1,0,0,1,0,0,0,1,1,
1,1,1,1,0,0,0,1,1,1,1,1,
1,1,1,1,1,1,1,0,0,1,1,1,
1,1,1,1,1,1,1,1,0,0,0,1,
1,1,1,1,1,1,1,1,0,0,0,1,
1,1,0,1,1,1,1,0,0,0,1,1,
1,1,0,0,0,0,0,0,0,0,1,1,
1,1,1,0,0,0,0,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,0,0,0,
1,1,1,1,1,1,1,1,0,0,0,1,
1,1,1,1,1,1,1,0,0,0,0,1,
1,1,1,1,1,1,0,0,1,1,0,0,
1,1,1,1,1,0,1,1,0,0,0,1,
1,1,1,1,0,0,1,1,0,0,0,1,
1,1,0,0,1,1,1,1,0,0,0,1,
1,1,0,1,0,1,1,1,0,0,0,1,
1,1,0,0,0,1,1,0,1,0,0,0,
1,1,0,0,0,0,0,0,0,0,1,0,
1,1,1,1,1,1,1,0,0,0,1,1,
1,1,1,1,1,1,1,0,0,0,1,1,
1,1,1,1,1,1,1,0,0,0,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,0,0,0,0,
1,1,1,1,0,0,0,0,0,0,0,0,
1,1,1,1,0,0,1,1,1,1,1,1,
1,1,1,1,0,0,1,1,1,1,1,1,
1,1,1,0,0,0,0,0,0,1,1,1,
1,1,1,0,0,0,0,0,0,0,1,1,
1,1,1,1,1,1,1,0,0,0,0,1,
0,1,1,1,1,1,1,1,0,0,0,1,
0,1,1,1,1,1,1,1,0,0,0,1,
1,1,1,1,1,1,1,0,0,0,0,1,
1,1,0,1,1,1,1,0,0,0,1,1,
1,1,0,0,0,0,0,0,0,1,1,1,
1,1,1,0,0,0,0,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,0,0,0,1,
1,1,1,1,0,0,0,0,0,0,0,0,
1,1,1,1,0,0,0,0,1,1,1,0,
1,1,1,0,0,0,1,1,1,1,1,1,
1,1,1,0,0,0,1,1,1,1,1,1,
1,1,0,0,0,1,1,0,0,0,1,1,
1,1,0,0,0,0,0,0,0,0,0,1,
1,1,0,0,0,0,1,1,0,0,0,1,
1,1,0,0,0,1,1,1,1,0,0,1,
1,1,0,0,0,1,1,1,1,0,0,1,
1,1,0,0,0,1,1,1,0,0,0,1,
1,1,1,0,0,0,1,0,0,0,1,1,
1,1,1,1,0,0,0,1,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,0,0,0,0,
1,1,1,1,1,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1,0,0,
1,1,1,1,1,1,1,1,1,1,0,0,
1,1,1,1,1,1,1,1,1,0,0,1,
1,1,1,1,1,1,1,0,0,0,1,1,
1,1,1,1,1,1,1,1,0,1,1,1,
1,1,1,1,1,1,0,0,0,1,1,1,
1,1,1,1,1,1,0,0,1,1,1,1,
1,1,1,1,1,0,0,1,1,1,1,1,
1,1,1,1,0,0,0,1,1,1,1,1,
1,1,1,1,0,0,1,1,1,1,1,1,
1,1,1,0,0,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,0,0,0,1,
1,1,1,1,1,0,0,0,0,0,0,1,
1,1,1,1,0,0,0,1,1,0,0,0,
1,1,1,1,0,0,0,1,1,0,0,0,
1,1,1,1,0,0,0,1,0,0,0,1,
1,1,1,1,0,0,0,0,0,0,1,1,
1,1,1,1,0,0,0,0,0,0,1,1,
1,1,1,0,0,0,1,0,0,0,0,1,
1,1,0,0,0,1,1,1,1,0,0,0,
1,1,0,0,0,1,1,1,1,0,0,0,
1,1,0,0,0,1,1,1,0,0,0,1,
1,1,0,0,0,0,0,0,0,0,1,1,
1,1,1,1,1,0,0,0,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
],
[
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,0,1,1,1,
1,1,1,1,0,0,0,0,0,0,0,1,
1,1,1,0,0,0,1,1,1,0,0,0,
1,1,1,0,0,0,1,1,1,1,0,0,
1,1,1,0,0,0,1,1,1,0,0,0,
1,1,0,0,0,0,1,1,1,0,0,0,
1,1,1,0,1,0,0,0,0,0,0,0,
1,1,1,1,0,1,1,0,1,0,0,0,
1,1,1,1,1,1,1,1,0,0,0,0,
1,1,1,1,1,1,1,1,1,0,0,1,
1,1,0,1,0,1,1,0,0,1,1,1,
1,1,0,0,1,0,0,0,0,1,1,1,
1,1,1,0,0,0,0,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1
]]
class CrackBmp():
    def cut_image(self, image):
        width, height = image.size
        item_width = int(width / 5)
        box_list = []
        box1 = (0, 0, item_width, height)
        box2 = (2 * item_width, 0, 3 * item_width, height)
        box_list.append(box1)
        box_list.append(box2)
        return [image.crop(box) for box in box_list]
    
    def save_images(self, image_list):
        index = 1
        for image in image_list:
            image.save('/tmp/img' + str(index) + '.png', 'PNG')
            index += 1
   
    def get_verified_code(self, tmp_buff):
        with open('/tmp/1.jpg','wb') as verify_pic:
            verify_pic.write(tmp_buff)
        return self.recoginze('/tmp/1.jpg')

    def recoginze(self, file_path):
        image = Image.open(file_path)
        image_list = self.cut_image(image)
        self.save_images(image_list)
        x = self.decode_from_file('/tmp/img1.png')
        y = self.decode_from_file('/tmp/img2.png')
        return x + y

    def get_similarty(self, num, matrix):
        similar_num = 0
        for index in range(len(matrix)):
            if num[index] == matrix[index]:
                similar_num += 1
        return similar_num
    
    def get_value(self, row_index, col_index, width, height, value_list):
        if row_index < 0 or row_index >= height or col_index < 0 or col_index >= width: return -1
        return value_list[row_index * width + col_index]

    def decode_from_file(self, file_path):
        im = Image.open(file_path)
        enhancer = ImageEnhance.Contrast(im)
        im = enhancer.enhance(7)
        im = im.convert("1")
        value_list = list(im.getdata())
        for i in range(len(value_list)):
            if value_list[i] == 255: value_list[i] = 1

        (width, height) = im.size
        for row_index in range(height):
            for col_index in range(width):
                tuple_list = [(row_index - 1, col_index - 1), (row_index - 1, col_index), (row_index - 1, col_index + 1),\
                              (row_index,     col_index - 1),                             (row_index,     col_index + 1),\
                              (row_index + 1, col_index - 1), (row_index + 1, col_index), (row_index + 1, col_index + 1)]

                flag_list = list()
                for t_tuple in tuple_list:
                    t_value = self.get_value(t_tuple[0], t_tuple[1], width, height, value_list)
                    if t_value != -1: flag_list.append(t_value)

                all_different = True
                value = self.get_value(row_index, col_index, width, height, value_list)
                for val in flag_list:
                    if val == value: all_different = False
                if all_different:
                    if 0 == value:
                        value_list[row_index * width + col_index] = 1
                    else:
                        value_list[row_index * width + col_index] = 0
                        
        #for row_index in range(20):
        #    print(value_list[12 * row_index: 12*row_index + 12])

        max_similarity = 0
        max_similarity_index = 0
        for i in range(len(num_matrix)):
            tmp_similarity = self.get_similarty(value_list, num_matrix[i])
            if tmp_similarity >= max_similarity:
                max_similarity_index = i
                max_similarity = tmp_similarity
        return max_similarity_index + 1
